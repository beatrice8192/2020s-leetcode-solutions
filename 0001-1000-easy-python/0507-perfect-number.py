# https://leetcode.com/problems/perfect-number

# https://en.wikipedia.org/wiki/Perfect_number
# The even perfect numbers <= 10^8 are [6, 28, 496, 8128, 33550336]
# which are generated by the formula 2^(p-1) * (2^p - 1) where 2^p - 1 is a prime number.

# Because 2^p - 1 is prime and can't be divided further,
# the summation of the divisors of 2^(p-1) * (2^p - 1) including 1 but excluding itself
# can be expanded and reduced as following, which proves they are perfect numbers:

### When p=7, the first line would expand into
###    64  + (128 - 1)    +  32      + (256     - 2)    +  16      + (512     - 4)      ...    2   + (4096     - 32)       + 1
# (2^(p-1) + (2^p - 2^0)) + (2^(p-2) + (2^(p+1) - 2^1)) + (2^(p-3) + (2^(p+2) - 2^2)) + ... + (2^1 + (2^(2p-2) - 2^(p-2))) + 1
# =2^(p-1) + 2^p + 2^(p+1) + 2^(p+2) + ... + 2^(2p-2)
# =2^(2p-1) - 2^(p-1)
# =2^(p-1) * (2^p - 1)

class Solution(object):
    # def checkPerfectNumber(self, num: int) -> bool:
    def checkPerfectNumber(self, num):
        """
        :type num: int
        :rtype: bool
        """
        sum = 1
        sqrt = int(ceil(num ** 0.5))
        if (sqrt ** 2 == num):
            sum += sqrt
        for i in range(2, sqrt):
            if (num % i == 0):
                sum += i + int(num / i)
            if (sum > num):
                return False
        return sum == num

